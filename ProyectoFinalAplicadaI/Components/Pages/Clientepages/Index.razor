@page "/IndexCliente"
@page "/IndexCliente/{ClienteId:int}"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ClienteService clienteservice
@attribute [Authorize]
@inject IJSRuntime JS

<PageTitle>Consulta de Clientes</PageTitle>

<style>
    body {
        background: linear-gradient(to right, #b3e5fc, #81d4fa);
        color: #000;
    }

    .card {
        background: linear-gradient(to right, #e1f5fe, #b3e5fc);
        border-radius: 20px;
        padding: 1rem;
        box-shadow: 0 0 15px rgba(33, 150, 243, 0.5);
        color: #000;
    }

    .card-header {
        background-color: #0288d1;
        color: white;
        border-radius: 20px 20px 0 0;
        padding: 1rem;
    }

    .card-header h3 {
        font-size: 24px;
        font-weight: bold;
    }

    label, th {
        color: #01579b;
        font-weight: bold;
    }

    .form-control, .form-select {
        background-color: #ffffff;
        color: #000;
        font-weight: bold;
        border-radius: 10px;
    }

    .btn-outline-primary {
        color: #ffffff;
        background-color: #0288d1;
        border-color: #0288d1;
    }

    .btn-outline-primary:hover {
        background-color: #0277bd;
        border-color: #0277bd;
    }

    .btn-outline-danger {
        background-color: #ffffff;
        color: #d32f2f;
        border: 2px solid #d32f2f;
    }

    .btn-outline-danger:hover {
        background-color: #d32f2f;
        color: #fff;
    }

    .btn-primary {
        background-color: #039be5;
        border-color: #0288d1;
        color: white;
    }

    .table th {
        background-color: #0288d1;
        color: white;
    }

    .table td {
        background-color: #e0f7fa;
        color: #000;
    }

    .bi-pencil-square {
        color: #fbc02d;
        cursor: pointer;
    }

    .bi-trash {
        color: #d32f2f;
        cursor: pointer;
    }

    .bi-eye {
        color: #039be5;
    }
</style>

<div class="card shadow">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3>🧾 Consulta de Clientes</h3>
        <a href="/CreateCliente" class="btn btn-outline-primary bi bi-plus-square"> Crear</a>
    </div>

    <div class="card-body">
        <!-- Filtros por fecha -->
        <div class="row mb-3 g-3 align-items-end">
            <div class="col-md-3">
                <label>Desde:</label>
                <input class="form-control" type="date" @bind="Desde" />
            </div>
            <div class="col-md-3">
                <label>Hasta:</label>
                <input class="form-control" type="date" @bind="Hasta" />
            </div>
            <div class="col-md-3">
                <button type="button" @onclick="Buscar" class="btn btn-primary w-100">
                    <i class="bi bi-search me-1"></i>Buscar
                </button>
            </div>
        </div>

        <!-- Filtros adicionales -->
        <div class="row mb-4 g-3">
            <div class="col-md-3">
                <label>Filtrar Por:</label>
                <InputSelect @bind-Value="Opcion" class="form-select">
                    <option value="0" selected disabled>Seleccione...</option>
                    <option value="1">ClienteId</option>
                    <option value="2">Nombre</option>
                </InputSelect>
            </div>

            @if (Opcion == 1)
            {
                <div class="col-md-3">
                    <label>ID:</label>
                    <InputNumber @bind-Value="ClientesId" class="form-control" />
                </div>
            }
            else if (Opcion == 2)
            {
                <div class="col-md-3">
                    <label>Nombre:</label>
                    <InputText @bind-Value="Nombre" class="form-control" />
                </div>
            }
        </div>

        <!-- Tabla -->
        <div class="table-responsive rounded-3 shadow mt-4">
            <table class="table table-bordered table-hover text-center">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Teléfono</th>
                        <th>Cédula</th>
                        <th>Email</th>
                        <th>Dirección</th>
                        <th>Fecha</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in ListaClientes)
                    {
                        <tr>
                            <td>@cliente.ClienteId</td>
                            <td>@cliente.Nombre</td>
                            <td>@string.Format("{0:(###) ###-####}", long.Parse(cliente.Telefono))</td>
                            <td>@string.Format("{0:###-#######-#}", long.Parse(cliente.Cedula))</td>
                            <td>@cliente.Email</td>
                            <td>@cliente.Direccion</td>
                            <td>@cliente.FechaRegistro.ToString("dd/MM/yyyy")</td>
                            <td>
                                <i class="bi bi-pencil-square" title="Editar" @onclick="() => Editar(cliente.ClienteId)"></i>
                            </td>
                            <td>
                                <a href="@($"/DeleteCliente/{cliente.ClienteId}")" class="bi bi-trash"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente { get; set; } = new Clientes();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public int Opcion = 0;
    public string Nombre { get; set; }
    public int ClientesId { get; set; }
    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaClientes = await clienteservice.Listar(t => true);
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        Hasta = new DateTime(Hasta.Year, Hasta.Month, Hasta.Day, 23, 59, 59);

        if (Opcion == 0)
        {
            ListaClientes = await clienteservice.Listar(t => t.FechaRegistro >= Desde && t.FechaRegistro <= Hasta);
        }
        else if (Opcion == 1)
        {
            ListaClientes = ClientesId <= 0
                ? await clienteservice.Listar(t => true)
                : await clienteservice.Listar(t => t.ClienteId == ClientesId && t.FechaRegistro >= Desde && t.FechaRegistro <= Hasta);
        }
        else if (Opcion == 2)
        {
            ListaClientes = string.IsNullOrEmpty(Nombre)
                ? await clienteservice.Listar(t => true)
                : await clienteservice.Listar(t => t.Nombre.ToLower().Contains(Nombre.ToLower()) && t.FechaRegistro >= Desde && t.FechaRegistro <= Hasta);
        }
    }

    private void Editar(int id)
    {
        Navigation.NavigateTo($"/EditCliente/{id}");
    }

    private async Task Eliminar(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este cliente?");
        if (confirm)
        {
            var resultado = await clienteservice.Eliminar(id);
            if (resultado)
            {
                ListaClientes = await clienteservice.Listar(t => true);
            }
            else
            {
                // Manejo de error si no se puede eliminar el cliente.
                await JS.InvokeVoidAsync("alert", "No se pudo eliminar el cliente.");
            }
        }
    }
}