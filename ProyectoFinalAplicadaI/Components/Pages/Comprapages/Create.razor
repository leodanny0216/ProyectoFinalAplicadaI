@page "/CreateCompra"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject CompraService compraservice
@inject InsumoService insumoService

<PageTitle>Registro de Compras</PageTitle>
<EditForm Model="compra" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de Compras</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="row">
                </div>
                <div class="row">

                    <div class="col col-4">
                        <label>Fecha Compra:</label>
                        <InputDate @bind-Value="compra.FechaCompra" class="form-control" disabled></InputDate>
                        <ValidationMessage For="(() => compra.FechaCompra)"></ValidationMessage>
                    </div>
                    <div class="col col-8">
                        <label>Descripci&oacute;n:</label>
                        <InputText @bind-Value="compra.Descripcion" class="form-control"></InputText>
                        <ValidationMessage For="(() => compra.Descripcion)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="card-header">
                <h4>Detalles de la Compra</h4>
            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col col-6">
                        <label>Insumo:</label>
                        <InputSelect @bind-Value="detalle.InsumoId" class="form-select">
                            <option value="0" selected disabled>Seleccione...</option>
                            @foreach (var item in listaInsumos)
                            {
                                <option value="@item.InsumosId">@item.NombreInsumo</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col col-6">
                        <label>Cantidad:</label>
                        <InputNumber @bind-Value="detalle.Cantidad" class="form-control"></InputNumber>
                        <ValidationMessage For="(() => detalle.Cantidad)"></ValidationMessage>
                    </div>

                </div>
                <br />
                <table class='table table-bordered table-hover'>
                    <thead>
                        <tr>
                            <th>Nombre del Insumo</th>
                            <th>Cantidad</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in compra.ComprasDetalle)
                        {
                            <tr>
                                <td>@ObtenerNombreInsumo(detalle.InsumoId)</td>
                                <td>@detalle.Cantidad</td>
                                <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary bi bi-plus-square">Agregar</button>
            </div>
        </div>
        <div class="card-footer">
            <div class="input-group">
                <a href="/IndexCompra" class="btn btn-outline-danger bi bi-arrow-return-left"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    public Compras compra = new Compras();
    public ComprasDetalle detalle = new ComprasDetalle();
    public List<ComprasDetalle> ListaDetalles = new List<ComprasDetalle>();
    public List<Insumos> listaInsumos = new List<Insumos>();

    protected override async Task OnInitializedAsync()
    {
        listaInsumos = await insumoService.Listar(t => true);
        compra.FechaCompra = DateTime.Now;
    }
    public string ObtenerNombreInsumo(int insumo)
    {
        var NombreInsumo = listaInsumos.FirstOrDefault(c => c.InsumosId == insumo);
        return NombreInsumo != null ? NombreInsumo.NombreInsumo : string.Empty;
    }
    public async Task Guardar()
    {
        var guardo = await compraservice.Guardar(compra);
        if (guardo)
        {
            Navigation.NavigateTo("/IndexCompra");
        }
    }
    public void AgregarDetalle()
    {
        if (detalle.InsumoId == 0)
        {
            return;
        }
        if (compra.ComprasDetalle.Any(cd => cd.InsumoId == detalle.InsumoId))
        {
            return;
        }
        if (detalle.Cantidad <= 0)
        {
            return;
        }
        // if (detalle.Cantidad > listaInsumos.FirstOrDefault(I => I.InsumosId == detalle.InsumoId).Cantidad)
        // {
        //     notificationService.ShowNotification(
        //         titulo: "Error",
        //         mensaje: "La cantidad supera la cantidad disponible en inventario.",
        //         NotificationSeverity.Error);
        //     return;
        // }

        compra.ComprasDetalle.Add(detalle);
        detalle = new ComprasDetalle();
    }

    public void EliminarDetalle(ComprasDetalle details)
    {
        detalle = details;
        compra.ComprasDetalle.Remove(details);
    }
}