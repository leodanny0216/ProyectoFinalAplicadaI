@page "/DeleteCompra"
@page "/DeleteCompra/{ComprasId:int}"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject NavigationManager Navigation
@attribute [Authorize]
@inject CompraService compraService
@inject InsumoService insumoService

<PageTitle>Eliminar Compra</PageTitle>

<style>
    body {
        background: linear-gradient(to right, #b3e5fc, #81d4fa);
        color: #000;
    }

    .card {
        background: linear-gradient(to right, #e1f5fe, #b3e5fc);
        border-radius: 20px;
        padding: 1rem;
        box-shadow: 0 0 15px rgba(33, 150, 243, 0.5);
    }

    .card-header {
        background-color: #d32f2f;
        color: white;
        border-radius: 20px 20px 0 0;
        padding: 1rem;
        text-align: center;
    }

        .card-header h3 {
            margin: 0;
        }

    .text-danger {
        color: #d32f2f !important;
    }

    .btn-outline-primary {
        color: #ffffff;
        background-color: #0288d1;
        border-color: #0288d1;
    }

        .btn-outline-primary:hover {
            background-color: #0277bd;
            border-color: #0277bd;
        }

    .btn-outline-danger {
        background-color: #ffffff;
        color: #d32f2f;
        border: 2px solid #d32f2f;
    }

        .btn-outline-danger:hover {
            background-color: #d32f2f;
            color: #fff;
        }
</style>

<div class="card shadow-sm border-danger">
    <div class="card-header">
        <h3 class="mb-0">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Confirmación de Eliminación
        </h3>
    </div>

    <div class="card-body">
        @if (compra == null)
        {
            <div class="alert alert-warning">Cargando datos de la compra...</div>
        }
        else
        {
            <p class="text-danger fw-bold fs-5">¿Está seguro que desea eliminar esta compra?</p>

            <dl class="row">
                <dt class="col-sm-3">Código de Compra:</dt>
                <dd class="col-sm-9">@compra.ComprasId</dd>

                <dt class="col-sm-3">Fecha del Registro:</dt>
                <dd class="col-sm-9">@compra.FechaCompra.ToString("dd/MM/yyyy")</dd>

                <dt class="col-sm-3">Descripción:</dt>
                <dd class="col-sm-9">@compra.Descripcion</dd>
            </dl>

            <h5 class="mt-4">Insumos Relacionados:</h5>
            @if (ListaDetalleCompras?.Any() == true)
            {
                <table class="table table-bordered table-hover table-sm">
                    <thead class="table-danger">
                        <tr>
                            <th>Nombre del Insumo</th>
                            <th>Cantidad</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in ListaDetalleCompras)
                        {
                            <tr>
                                <td>@ObtenerNombreInsumo(detalle.InsumoId)</td>
                                <td>@detalle.Cantidad</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">No hay insumos relacionados con esta compra</div>
            }
        }
    </div>

    <div class="card-footer d-flex justify-content-between">
        <a href="/IndexCompra" class="btn btn-outline-primary">
            <i class="bi bi-arrow-return-left me-1"></i>Volver
        </a>
        @if (compra != null)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar" disabled="@isDeleting">
                <i class="bi bi-trash3-fill me-1"></i>
                @(isDeleting ? "Eliminando..." : "Eliminar Compra")
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public int ComprasId { get; set; }

    private Compras compra;
    private List<ComprasDetalle> ListaDetalleCompras;
    private List<Insumos> listaInsumos;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaInsumos = await insumoService.Listar(t => true);
            compra = await compraService.GetCompras(ComprasId);

            if (compra != null)
            {
                ListaDetalleCompras = compra.ComprasDetalle?.ToList() ?? new List<ComprasDetalle>();
            }
        }
        catch (Exception ex)
        {
          
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
    }

    private string ObtenerNombreInsumo(int insumoId)
    {
        var insumo = listaInsumos?.FirstOrDefault(c => c.InsumosId == insumoId);
        return insumo?.NombreInsumo ?? "Insumo no encontrado";
    }

    public async Task Eliminar()
    {
        if (compra == null)
        {
            return;
        }
        if (await compraService.Eliminar(ComprasId))
        {
            Atras();
        }
    }

    void Atras()
    {
        Navigation.NavigateTo("/IndexCompra");
    }
}
